{"version":3,"sources":["components/message.js","components/input_field.js","App.js","helpers/RomanNumerals.js","reportWebVitals.js","index.js"],"names":["Message","value","useContext","InputContext","className","InputField","isError","userError","id","type","placeholder","onChange","event","convertInput","target","createContext","App","useState","setValue","setUserError","setIsError","Provider","params","length","toUpperCase","test","arabic","parseInt","a","romanNumList","M","CM","D","CD","C","XC","L","XV","X","IX","V","IV","I","roman","key","Math","floor","i","toRoman","num","pre","curr","char_to_int","c","charAt","fromRoman","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce0e08c1.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { InputContext } from '../App';\n\nexport default function Message() {\n    // Declare a new state variable\n    const value = useContext(InputContext);\n\n    return (\n        <article className=\"message is-dark\">\n          <div className=\"message-body\">{value.value}</div>\n      </article>\n    );\n}","import React, { useContext } from 'react';\nimport { InputContext } from '../App';\n\nexport default function InputField() {\n    // Declare a new state variable\n    const value = useContext(InputContext);\n\n    return (\n        <div className=\"field\">\n          <div className=\"field-body\">\n                <div className=\"field\">\n                <p className={`help ${value.isError ? 'is-danger' : 'is-info'}`}>{value.userError}</p>\n                <p className=\"control\">\n                    <input id=\"input_field\" className=\"input\" type=\"email\" placeholder=\"It can be either Arabic or Roman\" onChange={event => value.convertInput(event.target.value)}></input>\n                </p>\n                </div>\n          </div>\n      </div>\n    );\n}","import Message from './components/message';\nimport InputField from './components/input_field';\n\nimport { toRoman, fromRoman } from './helpers/RomanNumerals';\n\nimport React, { useState, createContext } from 'react';\n\nexport const InputContext = createContext();\n\nexport default function App() {\n  const [value, setValue] = useState('Results show here.');\n  const [userError, setUserError] = useState('Convert almost any number you can think of.');\n  const [isError, setIsError] = useState(false);\n\n  function convertInput(params) {\n\n    if (params.length < 1 || !params) {\n      setValue('Results show here.');\n      setUserError('Convert almost any number you can think of.');\n      setIsError(false);\n    } else {\n      params = params.toUpperCase();\n      \n      // test for digits only\n      if ((/\\d/g).test(params)) {\n        setUserError(\"You want to convert to Roman numerals.\");\n        setIsError(false);\n        setValue(toRoman(params));\n\n        if (value.length < 1) {\n          setIsError(true);\n          setUserError(\"You cant mix the two.\");\n        }\n      }\n\n      // test for these letters only\n      if ((/^[IVXLCDM]+$/i).test(params)) {\n        setUserError('You want to convert to Arabic numerals, from Roman.');\n        setIsError(false);\n        let num = fromRoman(params);\n\n        if (num < 0) {\n          setUserError('Only use Roman numerals.');\n          setValue('Results show here.');\n          setIsError(true);\n          params = '';\n        } else {\n          setValue(num);\n\n          if (value.length < 1) {\n            setIsError(true);\n            setUserError(\"You cant mix the two.\");\n          }\n        }\n      }\n      \n    } \n  }\n\n  return (\n    <>\n      <InputContext.Provider value={{value, userError, isError, convertInput}}>\n        <section class=\"hero is-medium is-info\">\n          <div class=\"hero-body\">\n            <p class=\"title\">Arabic Roman</p>\n            <p class=\"subtitle\">An ancient converter</p>\n          </div>\n        </section>\n        <br/><br/>\n        <p className=\"subtitle is-6\">\n            In Roman numerals, 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC. 2008 is written as 2000=MM, 8=VIII; or MMVIII.\n            <br/><br/>\n            Enter <b>Arabic</b> numerals below (eg. 1, 2, 3, 4, 5, 6, 7, 8, and 9) to convert to <b>Roman</b> numerals.\n            <br/><br/>\n            You can alternatively enter <b>Roman</b> numerals (eg. MMVIII) to convert to <b>Arabic</b>\n        </p>\n        <br/><br/>\n        <Message/>\n        <br/>\n        <InputField/>\n        <br/><br/><br/><br/>\n      </InputContext.Provider>\n    </>\n  );\n}\n","export function toRoman(arabic) {\n    arabic = parseInt(arabic);\n    const romanNumList = {M:1000, CM:900, D:500, CD:400, C:100, XC:90, L:50, XV: 40, X:10, IX:9, V:5, IV:4, I:1};\n    let roman = '', a;\n        \n    for (let key in romanNumList) {\n        a = Math.floor(arabic / romanNumList[key]);\n        if (a > 0) {\n            for (let i = 0; i < a; i++) {\n            roman += key;\n            }\n        }\n        arabic = arabic % romanNumList[key];\n    }\n    return roman;\n}\n\nexport function fromRoman(roman) {\n    let pre, curr;\n\n    let char_to_int = function (c) {\n        switch (c) {\n            case 'I': return 1;\n            case 'V': return 5;\n            case 'X': return 10;\n            case 'L': return 50;\n            case 'C': return 100;\n            case 'D': return 500;\n            case 'M': return 1000;\n            default: return -1;\n        }\n    }\n\n    let arabic = char_to_int(roman.charAt(0))\n\n    for (let i = 1; i < roman.length; i++) {\n        curr = char_to_int(roman.charAt(i));\n        pre = char_to_int(roman.charAt(i-1));\n\n        if (curr <= pre) {\n            arabic += curr;\n        } else {\n            arabic = arabic - pre * 2 + curr;\n        }\n    }\n\n    return arabic;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}